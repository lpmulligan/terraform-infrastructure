parameters:
  - name: states
    type: object
  - name: service_connection

stages:
  - ${{ each state in parameters.states }}:
      - ${{ each wkspc in state.value.workspaces }}:
          - stage: Apply_${{ wkspc }}
            dependsOn:
              - Plan_${{ wkspc }}
              - ${{ if state.value.dependsOn }}:
                  - Apply_${{ state.value.dependsOn }}
            jobs:
              - job: get_build_tags
                displayName: "Get Build Tags"
                steps:
                  - script: |
                      PROJECT=$( printf "%s\n" "$(System.TeamProject)" | sed 's/ /%20/g' )
                      URL="$(System.CollectionUri)$PROJECT/_apis/build/builds/$(Build.BuildId)/tags?api-version=5.1"
                      echo "###vso[task.setvariable variable=BuildTags;isOutput=true]$(curl -s -u azdo:$(System.AccessToken) --request GET $URL | jq -r '.value | join(" ")')"
                    name: GetTags
              - deployment: Apply_${{ wkspc }}
                dependsOn: get_build_tags
                condition: contains(dependencies.get_build_tags.outputs['GetTags.BuildTags'], '${{ wkspc }}_tfplan')
                displayName: "Terraform Apply ${{ wkspc }}"
                environment: Terraform-Apply
                strategy:
                  runOnce:
                    deploy:
                      steps:
                        - checkout: self
                          clean: true
                          persistCredentials: true
                        - download: current
                          artifact: "tfplan_${{ wkspc }}"
                        - script: |
                            mkdir -p ${{ wkspc }} 
                            tar -xzvf tfplan_${{ wkspc }}/${{ wkspc }}.tar.gz --directory ${{ wkspc }}
                          displayName: "Extract Artifact to ${{ wkspc }}"
                          workingDirectory: "$(Pipeline.Workspace)"
                        - task: JamiePhillips.Terraform.TerraformTool.TerraformTool@0
                          displayName: "Use Terraform $(TF_VERSION)"
                          inputs:
                            version: "$(TF_VERSION)"
                        - task: AzureCLI@1
                          displayName: "Setup Authentication"
                          inputs:
                            azureSubscription: "${{ parameters.service_connection }}"
                            addSpnToEnvironment: true
                            scriptLocation: inlineScript
                            failOnStandardError: "true"
                            inlineScript: |
                              echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(az account show --query="id" -o tsv)"
                              echo "##vso[task.setvariable variable=ARM_CLIENT_ID]${servicePrincipalId}"
                              echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]${servicePrincipalKey}"
                              echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(az account show --query="tenantId" -o tsv)"
                              echo "##vso[task.setvariable variable=ARM_ACCESS_KEY]$(az storage account keys list -n ${STATE_STORAGE_ACCOUNT} --subscription "${STATE_SUBSCRIPTION}" --query="[0].value" -o tsv)"
                        - script: |
                            WORKSPACE=`echo ${{ wkspc }} | tr "_" -`
                            terraform workspace select ${WORKSPACE}
                            terraform apply -auto-approve -no-color -input=false tfplan
                          displayName: "Terraform Apply ${{ wkspc }}"
                          workingDirectory: "$(Pipeline.Workspace)/${{ wkspc }}/${{ state.key }}"
                          env:
                            TF_IN_AUTOMATION: true
